<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Account" xml:space="preserve">
    <value>Account</value>
  </data>
  <data name="Add" xml:space="preserve">
    <value>Add</value>
  </data>
  <data name="Address" xml:space="preserve">
    <value>Address</value>
  </data>
  <data name="AppName" xml:space="preserve">
    <value>Student Management</value>
  </data>
  <data name="BackToHomepage" xml:space="preserve">
    <value>Back to homepage</value>
  </data>
  <data name="BirthDate" xml:space="preserve">
    <value>Date of Birth</value>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="ChangeLanguage" xml:space="preserve">
    <value>Change language</value>
  </data>
  <data name="ChooseGender" xml:space="preserve">
    <value>Choose gender</value>
  </data>
  <data name="Class" xml:space="preserve">
    <value>Class</value>
  </data>
  <data name="ClassLong" xml:space="preserve">
    <value>Class</value>
  </data>
  <data name="ConfirmCancel" xml:space="preserve">
    <value>Do you really want to cancel, every changes will not be saved?</value>
  </data>
  <data name="Create" xml:space="preserve">
    <value>Create</value>
  </data>
  <data name="CreateClass" xml:space="preserve">
    <value>Create class</value>
  </data>
  <data name="CreateSemesterReport" xml:space="preserve">
    <value>Create semester report</value>
  </data>
  <data name="CreateStudent" xml:space="preserve">
    <value>Create student</value>
  </data>
  <data name="CreateSubject" xml:space="preserve">
    <value>Create subject</value>
  </data>
  <data name="CreateSubjectReport" xml:space="preserve">
    <value>Create subject report</value>
  </data>
  <data name="CreateTranscript" xml:space="preserve">
    <value>Create transcript</value>
  </data>
  <data name="DateOnlyError" xml:space="preserve">
    <value>This value must be a date</value>
  </data>
  <data name="Delete" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="DeleteConfirmMessage" xml:space="preserve">
    <value>Do you really want to delete {0} which has  {1} </value>
  </data>
  <data name="DevelopeByHelloVanDuc" xml:space="preserve">
    <value>Develope by helloVanDuc</value>
  </data>
  <data name="Done" xml:space="preserve">
    <value>Done</value>
  </data>
  <data name="EditClass" xml:space="preserve">
    <value>Edit class</value>
  </data>
  <data name="EditStudent" xml:space="preserve">
    <value>Edit student</value>
  </data>
  <data name="EditSubject" xml:space="preserve">
    <value>Edit subject</value>
  </data>
  <data name="Email" xml:space="preserve">
    <value>Email</value>
  </data>
  <data name="EmailAddressError" xml:space="preserve">
    <value>{0} must be an email address</value>
  </data>
  <data name="Error" xml:space="preserve">
    <value>Error</value>
  </data>
  <data name="Female" xml:space="preserve">
    <value>Female</value>
  </data>
  <data name="FifteenMinutesTestScore" xml:space="preserve">
    <value>Fifteen minutes test score</value>
  </data>
  <data name="FinalTestScore" xml:space="preserve">
    <value>Final test score</value>
  </data>
  <data name="FirstSemesterAverageScore" xml:space="preserve">
    <value>First semester average score</value>
  </data>
  <data name="FortyFiveMinutesTestScore" xml:space="preserve">
    <value>Forty minutes test score</value>
  </data>
  <data name="Gender" xml:space="preserve">
    <value>Gender</value>
  </data>
  <data name="Grade" xml:space="preserve">
    <value>Grade</value>
  </data>
  <data name="HomePage" xml:space="preserve">
    <value>Home page</value>
  </data>
  <data name="Id" xml:space="preserve">
    <value>Id</value>
  </data>
  <data name="Language" xml:space="preserve">
    <value>Language</value>
  </data>
  <data name="List" xml:space="preserve">
    <value>List</value>
  </data>
  <data name="ListClasses" xml:space="preserve">
    <value>List classes</value>
  </data>
  <data name="ListRules" xml:space="preserve">
    <value>List rules</value>
  </data>
  <data name="ListScripts" xml:space="preserve">
    <value>List transcripts</value>
  </data>
  <data name="ListStudents" xml:space="preserve">
    <value>List students</value>
  </data>
  <data name="ListSubjects" xml:space="preserve">
    <value>List subjects</value>
  </data>
  <data name="LogOut" xml:space="preserve">
    <value>Log out</value>
  </data>
  <data name="Male" xml:space="preserve">
    <value>Male</value>
  </data>
  <data name="Menu" xml:space="preserve">
    <value>Menu</value>
  </data>
  <data name="Name" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="No" xml:space="preserve">
    <value>No</value>
  </data>
  <data name="NumberOfStudentsInClass" xml:space="preserve">
    <value>Number of Students</value>
  </data>
  <data name="NumberOfStudentsPass" xml:space="preserve">
    <value>Number of Pass</value>
  </data>
  <data name="NumberOnlyError" xml:space="preserve">
    <value>This value must be a number</value>
  </data>
  <data name="ObjectAlreadyExists" xml:space="preserve">
    <value>{0} which has {1}: {2} already exist, please select other {1}</value>
  </data>
  <data name="ObjectDoesNotExists" xml:space="preserve">
    <value>{0} which has  {1}: {2} not exist</value>
  </data>
  <data name="ObjectHasBeenUpdated" xml:space="preserve">
    <value>{0} which has {1}: {2} has been updated since the last time you load it</value>
  </data>
  <data name="Other" xml:space="preserve">
    <value>Other</value>
  </data>
  <data name="OutOfMaximumNumberOfStudentsInClass" xml:space="preserve">
    <value>The number of student in one class can not over {0}</value>
  </data>
  <data name="RangeError" xml:space="preserve">
    <value>{0} must be from {1} to {2}</value>
  </data>
  <data name="Ratio" xml:space="preserve">
    <value>Ratio</value>
  </data>
  <data name="Report" xml:space="preserve">
    <value>Report</value>
  </data>
  <data name="ReportSemester" xml:space="preserve">
    <value>Semester report</value>
  </data>
  <data name="ReportSubject" xml:space="preserve">
    <value>Subject report</value>
  </data>
  <data name="RequiredError" xml:space="preserve">
    <value>This value must be filled</value>
  </data>
  <data name="RequiredFieldMissing" xml:space="preserve">
    <value>Required field(s) is missed</value>
  </data>
  <data name="Rule" xml:space="preserve">
    <value>Rule</value>
  </data>
  <data name="RuleName" xml:space="preserve">
    <value>Rule name</value>
  </data>
  <data name="Save" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="Script" xml:space="preserve">
    <value>Transcript</value>
  </data>
  <data name="Search" xml:space="preserve">
    <value>Search</value>
  </data>
  <data name="SearchTranscript" xml:space="preserve">
    <value>Search transcript</value>
  </data>
  <data name="SecondSemesterAverageScore" xml:space="preserve">
    <value>Second semester average score</value>
  </data>
  <data name="Semester" xml:space="preserve">
    <value>Semester</value>
  </data>
  <data name="SemesterReport" xml:space="preserve">
    <value>Semester report</value>
  </data>
  <data name="Setting" xml:space="preserve">
    <value>Setting</value>
  </data>
  <data name="StringLengthError" xml:space="preserve">
    <value>{0} can not over {1} characters</value>
  </data>
  <data name="Student" xml:space="preserve">
    <value>Student</value>
  </data>
  <data name="StudentAgeInvalid" xml:space="preserve">
    <value>Student age must be from {0} to {1}</value>
  </data>
  <data name="StudentAlreadyHaveClass" xml:space="preserve">
    <value>Student with id {0} already has class, you can not add him/her to other class</value>
  </data>
  <data name="StudentId" xml:space="preserve">
    <value>Student Id</value>
  </data>
  <data name="StudentIdAlreadyExist" xml:space="preserve">
    <value>Student Id already exist, please select other Id</value>
  </data>
  <data name="StudentName" xml:space="preserve">
    <value>Full name</value>
  </data>
  <data name="Subject" xml:space="preserve">
    <value>Subject</value>
  </data>
  <data name="SubjectReport" xml:space="preserve">
    <value>Subject report</value>
  </data>
  <data name="Transcript" xml:space="preserve">
    <value>Transcript</value>
  </data>
  <data name="TranscriptDetail" xml:space="preserve">
    <value>Transcript detail</value>
  </data>
  <data name="TranscriptOfClass" xml:space="preserve">
    <value>Subject/Class/Semester</value>
  </data>
  <data name="Type" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="UnableToCast" xml:space="preserve">
    <value>Invalid value, please change the value proper with the type of the rule</value>
  </data>
  <data name="Update" xml:space="preserve">
    <value>Update</value>
  </data>
  <data name="UpdateRule" xml:space="preserve">
    <value>Update rules</value>
  </data>
  <data name="UpdateTranscript" xml:space="preserve">
    <value>Update transcript</value>
  </data>
  <data name="Value" xml:space="preserve">
    <value>Value</value>
  </data>
  <data name="Yes" xml:space="preserve">
    <value>Yes</value>
  </data>
</root>